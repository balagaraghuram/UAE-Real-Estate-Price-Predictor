#!/usr/bin/env python3
import argparse
import logging
from src.preprocess import preprocess_data
from src.train import train_model
from src.inference import predict_prices
from src.evaluate import evaluate_model

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

def main():
    parser = argparse.ArgumentParser(description="UAE Real Estate Price Predictor CLI")
    subparsers = parser.add_subparsers(dest="command", required=True)

    preprocess_parser = subparsers.add_parser("preprocess", help="Preprocess raw data")
    preprocess_parser.add_argument("--input", required=True, help="Path to raw dataset")
    preprocess_parser.add_argument("--output", required=True, help="Path to save processed data")

    train_parser = subparsers.add_parser("train", help="Train a price prediction model")
    train_parser.add_argument("--model", choices=["random_forest", "xgboost"], required=True, help="Model to train")

    inference_parser = subparsers.add_parser("inference", help="Make predictions on new data")
    inference_parser.add_argument("--model_path", required=True, help="Path to trained model")
    inference_parser.add_argument("--input_path", required=True, help="Path to input data")
    inference_parser.add_argument("--output_path", required=True, help="Path to save predictions")

    evaluate_parser = subparsers.add_parser("evaluate", help="Evaluate a trained model")
    evaluate_parser.add_argument("--model_path", required=True, help="Path to trained model")
    evaluate_parser.add_argument("--metrics", nargs="+", choices=["rmse", "mae", "r2"], required=True, help="Metrics to compute")

    args = parser.parse_args()

    if args.command == "preprocess":
        preprocess_data(args.input, args.output)
    elif args.command == "train":
        train_model(args.model)
    elif args.command == "inference":
        predict_prices(args.model_path, args.input_path, args.output_path)
    elif args.command == "evaluate":
        evaluate_model(args.model_path, args.metrics)
    else:
        logging.error("Unknown command")


if __name__ == "__main__":
    main()
